@page "/integrations"
@attribute [Authorize]
@inject IIntegrationsClient IntegrationsClient
@inject NavigationManager NavigationManager
@using MyHealth.Web.App.Areas.Integrations.Client
@using MyHealth.Web.App.Areas.Integrations.Models

<PageContainer Title="Integrations">
    @if (_integrations is null)
    {
        <Spin />
    }
    else
    {
        <Row Type="flex" Gutter="24">
        @foreach (var integration in _integrations)
        {
            <AntDesign.Col Span="8">
                <IntegrationCard Integration="@integration"
                                 OnCreateIntegration="@CreateIntegrationAsync"
                                 OnDeleteIntegration="@DeleteIntegrationAsync" />
            </AntDesign.Col>
        }
        </Row>
    }
    </PageContainer>

@code {
    private IEnumerable<Integration> _integrations;

    protected override async Task OnInitializedAsync()
    {
        await GetIntegrationsAsync();
    }

    private async Task GetIntegrationsAsync()
    {
        _integrations = (await IntegrationsClient.GetAllIntegrationsAsync()).Integrations;
    }

    private async Task CreateIntegrationAsync(Integration integration)
    {
        switch (integration.Provider)
        {
            case Provider.Fitbit:
                string fitbitAuthenticationUri = await IntegrationsClient.GetFitbitAuthenticationUriAsync($"{NavigationManager.BaseUri}integrations/fitbitcallback");
                NavigationManager.NavigateTo(fitbitAuthenticationUri);
                break;
            case Provider.Strava:
                string stravaAuthenticationUri = await IntegrationsClient.GetStravaAuthenticationUriAsync($"{NavigationManager.BaseUri}integrations/stravacallback");
                NavigationManager.NavigateTo(stravaAuthenticationUri);
                break;
            default:
                throw new Exception($"Unsupported provider {integration.Provider}");
        }
    }

    private async Task DeleteIntegrationAsync(Integration integration)
    {
        await IntegrationsClient.DeleteIntegrationAsync(integration.Id);
        await GetIntegrationsAsync();
    }
}
